package net.axiiom.CoordinatesBook.Listeners;

import net.axiiom.CoordinatesBook.Coordinate;
import net.axiiom.CoordinatesBook.Main.CoordinatesBookPlugin;
import net.axiiom.CoordinatesBook.Utilities.NBT.NBTWrapper;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.SkullMeta;

import java.util.ArrayList;
import java.util.Arrays;

/*
    Class that listens to player input on the inventory - used to share coordinates
 */
public class ShareInventoryListener implements Listener {
    private final ArrayList<Integer> possiblePlayerInventoryIndices;
    private final CoordinatesBookPlugin plugin;

    public ShareInventoryListener(CoordinatesBookPlugin _plugin) {
        this.plugin = _plugin;
        this.possiblePlayerInventoryIndices = new ArrayList<>(
          Arrays.asList(0,1,2,3,9,10,11,12,18,19,20,21,27,28,29,30,36,37,38,39,45,46,47,48)
        );
    }

    // Runs when an item is clicked on in the player's inventory. Only runs functionality when the clicked inventory
    // is generated by the plugin
    @EventHandler
    public void onClickInventory(InventoryClickEvent _event) {
        String inventoryTitle = _event.getView().getTitle();
        if(_event.getCurrentItem() == null || !inventoryTitle.equalsIgnoreCase("Share your Coordinate")) {
            return;
        }
        _event.setCancelled(true);

        Inventory inventory = _event.getClickedInventory();
        if(inventory == null || inventory.getType().equals(InventoryType.PLAYER)) {
            return;
        }

        ItemStack item = _event.getCurrentItem();
        Player player = (Player) _event.getWhoClicked();

        switch (item.getType()) {
            case PLAYER_HEAD:
                handlePlayerHeadClick(_event, item, inventory);
                break;
            case LIME_CONCRETE:
                handleLimeConcreteClick(inventory, player);
                break;
        }
    }

    private void handleLimeConcreteClick(Inventory _inventory, Player _player) {
        Coordinate coordinate = getCoordinateFromItem(_inventory.getItem(49));
        if(coordinate == null) {
            _player.sendMessage("Error: Could not find coordinate");
            return;
        }

        possiblePlayerInventoryIndices.stream()
            .map(_inventory::getItem)
            .forEach(item -> {
                if(item == null || !item.getType().equals(Material.PLAYER_HEAD)) {
                    return;
                }

                SkullMeta skullMeta = (SkullMeta) item.getItemMeta();
                if(skullMeta == null || skullMeta.getOwningPlayer() == null) {
                    return;
                }

                OfflinePlayer owner = skullMeta.getOwningPlayer();
                if(owner == null || owner.getName() == null) {
                    return;
                }

                Player player = Bukkit.getPlayer(owner.getName());
                if(player != null) {
                    sendShareCoordinateMessage(coordinate, player, _player);
                }
            }
        );

        _player.closeInventory();
    }

    private void handlePlayerHeadClick(InventoryClickEvent _event, ItemStack _item, Inventory _inventory) {
        boolean ok = possiblePlayerInventoryIndices.contains(_event.getSlot());
        int openSlot = getFirstOpenSlot(_inventory, !ok);

        if(openSlot != -1) {
            _inventory.setItem(_event.getSlot(), new ItemStack(Material.AIR));
            _inventory.setItem(openSlot, _item);
        }
    }

    /* Shares coordinate with a player in the message format.
        '<player_name> has sent you their coordinate:
        <coordinate_name> : (<x> <y> <z>)
        Add to your coordinate book? yes / no'

       The player simply clicks on "yes" or "no" to accept or deny the request
    */
    private void sendShareCoordinateMessage(Coordinate _coordinate, Player _targetPlayer, Player _sender) {
        plugin.commandExecutor.awaitingShareResponse.put(_targetPlayer.getUniqueId(), _coordinate);
        Location location = _coordinate.getLocation();
        String coords = String.format("%s/%s/%s", location.getBlockX(), location.getBlockY(), location.getBlockZ());

        String command = "tellraw " + _targetPlayer.getDisplayName() + String.format(" [\"\",{\"text\":\"%s \"," +
            "\"color\":\"aqua\"},{\"text\":\"has send you their coordinate\\n\"},{\"text\":\"'%s'\",\"color\":\"gold\"}," +
            "{\"text\":\" at \"},{\"text\":\"%s \",\"color\":\"gold\"},{\"text\":\"in the\",\"color\":\"white\"}," +
            "{\"text\":\" %s\",\"color\":\"gold\"},{\"text\":\".\",\"color\":\"white\"}," +
            "{\"text\":\"\\nAdd the coordinate to your book?\\nClick one: (\"},{\"text\":\"yes\",\"color\":\"green\"," +
            "\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/receivecoordinate\"},\"hoverEvent\":" +
            "{\"action\":\"show_text\",\"contents\":\"Receive\"}},{\"text\":\" \",\"color\":\"green\",\"clickEvent\":" +
            "{\"action\":\"run_command\",\"value\":\"/receivecoordinate\"}},{\"text\":\"/ \"},{\"text\":\"no\"," +
            "\"color\":\"red\",\"clickEvent\":{\"action\":\"run_command\",\"value\":\"/denycoordinate\"}," +
            "\"hoverEvent\":{\"action\":\"show_text\",\"contents\":\"Ignore\"}},{\"text\":\")\"}]",
            _sender.getName(), _coordinate.getName(), coords, _coordinate.getWorldName()
        );

        Bukkit.dispatchCommand(_sender.getServer().getConsoleSender(), command);
    }

    // Gets the coordinate from the NBT Tags assigned to the item
    private Coordinate getCoordinateFromItem(ItemStack _book){
        String uuid = NBTWrapper.getNBTTag("uuid", _book);
        return plugin.getCoordinateManager().getCoordinateByUUID(uuid);
    }

    // Gets the first open slot in the player's currently open inventory
    private int getFirstOpenSlot(Inventory _inventory, boolean _usePlayerInventory) {
        for(int invIdx = 0; invIdx < 54; invIdx++) {
            ItemStack thisItem = _inventory.getItem(invIdx);
            if(thisItem != null && !thisItem.getType().equals(Material.AIR)) {
                continue;
            }

            boolean validPlayerIndex =_usePlayerInventory && possiblePlayerInventoryIndices.contains(invIdx);
            boolean validNonPlayerIndex = !_usePlayerInventory && !possiblePlayerInventoryIndices.contains(invIdx);
            if(validPlayerIndex || validNonPlayerIndex) {
                return invIdx;
            }
        }

        return -1;
    }
}
